{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourcesContent": ["let objectsByDifficulty = {};\r\nfor (let [text, data] of Object.entries(objects)) {\r\n    let difficulty = data.difficulty;\r\n    if (objectsByDifficulty[difficulty] === undefined) {\r\n        objectsByDifficulty[difficulty] = [];\r\n    }\r\n    objectsByDifficulty[difficulty].push(text);\r\n}\r\n\r\nlet availableDifficulties = Object.keys(objectsByDifficulty);\r\nlet currentBingoObjects = [];\r\n\r\n// Create difficulty toggle element\r\nlet _div = document.getElementById(\"difficulty-toggle-div\");\r\n_div.innerHTML = \"\";\r\nlet numSeenDifficulties = 0;\r\nlet select = document.createElement(\"select\");\r\nselect.multiple = \"multiple\";\r\nselect.id = \"difficulty-toggle\";\r\nfor (let i = 0; i < availableDifficulties.length; i++) {\r\n    if (parseInt(availableDifficulties[i]) < 1) {\r\n        continue;\r\n    }\r\n    let option = document.createElement(\"option\");\r\n    option.value = availableDifficulties[i];\r\n    option.innerText = availableDifficulties[i];\r\n\r\n    // Set the initially selected difficulties\r\n    if ([\"6\", \"7\", \"8\"].includes(availableDifficulties[i])) {\r\n        option.selected = true;\r\n    }\r\n\r\n    select.appendChild(option);\r\n    numSeenDifficulties++;\r\n}\r\nselect.size = numSeenDifficulties;\r\nselect.onchange = onDifficultyToggleChange;\r\n_div.appendChild(select);\r\n\r\nlet maxCardSize = 6;\r\nlet cellIsMarked = [];\r\nfor (let i = 0; i < maxCardSize; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < maxCardSize; j++) {\r\n        row.push(false);\r\n    }\r\n    cellIsMarked.push(row);\r\n}\r\n\r\ngenerateNewCard();\r\n\r\nfunction onDifficultyToggleChange() {\r\n    generateNewCard();\r\n}\r\n\r\nfunction onRandomizeButtonClick() {\r\n    generateNewCard();\r\n}\r\nwindow.onRandomizeButtonClick = onRandomizeButtonClick;\r\n\r\nfunction onSizeSelectChange() {\r\n    displayCard();\r\n}\r\nwindow.onSizeSelectChange = onSizeSelectChange;\r\n\r\nfunction onFreeSpaceInput() {\r\n    displayCard();\r\n}\r\nwindow.onFreeSpaceInput = onFreeSpaceInput;\r\n\r\nfunction onShowDifficultyInput() {\r\n    displayCard();\r\n}\r\nwindow.onShowDifficultyInput = onShowDifficultyInput;\r\n\r\nfunction onShowEmojiInput() {\r\n    displayCard();\r\n}\r\nwindow.onShowEmojiInput = onShowEmojiInput;\r\n\r\nfunction onClearMarkedCellsButtonClick() {\r\n    cellIsMarked = [];\r\n    for (let i = 0; i < maxCardSize; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < maxCardSize; j++) {\r\n            row.push(false);\r\n        }\r\n        cellIsMarked.push(row);\r\n    }\r\n    displayCard();\r\n}\r\nwindow.onClearMarkedCellsButtonClick = onClearMarkedCellsButtonClick;\r\n\r\nfunction onClickCell(cell, row, column) {\r\n    cellIsMarked[row][column] = !cellIsMarked[row][column];\r\n    cell.className = \"\";\r\n    cell.classList.add(\"bingo-cell\");\r\n    if (cellIsMarked[row][column]) {\r\n        cell.classList.add(\"marked-cell\");\r\n    }\r\n}\r\n\r\nfunction generateNewCard() {\r\n    let selectedDifficulties = getToggledDifficulties();\r\n    \r\n    if (selectedDifficulties.length === 0) {\r\n        return;\r\n    }\r\n    \r\n    // Always generate the max needed objects so I don't have to\r\n    // re-randomize when the user changes every option\r\n    let neededObjects = maxCardSize * maxCardSize;\r\n\r\n    // If we would have duplicates in the bingo card, add next highest\r\n    // or next lowest difficulties repeatedly until that's not the case\r\n    let possibleObjects = 0;\r\n    for (let i = 0; i < selectedDifficulties.length; i++) {\r\n        let difficulty = selectedDifficulties[i]\r\n        possibleObjects += objectsByDifficulty[difficulty].length;\r\n    }\r\n\r\n    if (possibleObjects < neededObjects) {\r\n        console.log(\"Just using the selected difficulties would cause duplicates, so I will add a few more difficulties to prevent that.\");\r\n        selectedDifficulties.sort();\r\n        let maxDifficulty = selectedDifficulties[selectedDifficulties.length - 1]\r\n        let direction;\r\n        if (maxDifficulty < 3) {\r\n            direction = 1;\r\n        } else  {\r\n            direction = -1\r\n        }\r\n    \r\n        while (possibleObjects < neededObjects) {\r\n            selectedDifficulties.sort();\r\n            let i = selectedDifficulties.length - 1;\r\n            let currentDifficulty = selectedDifficulties[selectedDifficulties.length - 1];\r\n            while (currentDifficulty === selectedDifficulties[i]) {\r\n                currentDifficulty += direction;\r\n                i += direction;\r\n            }\r\n            selectedDifficulties.push(currentDifficulty);\r\n            possibleObjects += objectsByDifficulty[currentDifficulty].length;\r\n        }\r\n    }\r\n\r\n    // Add random objects until we have the required number\r\n    currentBingoObjects = [];\r\n    let randomizedObjects = [];\r\n    for (let i = 0; i < neededObjects; i++) {\r\n        let difficulty = selectedDifficulties[getRandomInt(selectedDifficulties.length)];\r\n        let possibleObjects = objectsByDifficulty[difficulty];\r\n        let object = possibleObjects[getRandomInt(possibleObjects.length)];\r\n\r\n        let numAttempts = 1;\r\n        while (randomizedObjects.includes(object) && numAttempts < 50) {\r\n            difficulty = selectedDifficulties[getRandomInt(selectedDifficulties.length)];\r\n            possibleObjects = objectsByDifficulty[difficulty];\r\n            object = possibleObjects[getRandomInt(possibleObjects.length)];\r\n            numAttempts++;\r\n        }\r\n\r\n        randomizedObjects.push(object);\r\n    }\r\n\r\n    for (let i = 0; i < randomizedObjects.length; i++) {\r\n        let object = objects[randomizedObjects[i]];\r\n        currentBingoObjects.push({\r\n            text: randomizedObjects[i],\r\n            emoji: object.emoji,\r\n            difficulty: object.difficulty,\r\n        });\r\n    }\r\n\r\n    displayCard();\r\n}\r\n\r\nfunction displayCard() {\r\n    let cardSize = getCardSize();\r\n    let hasFreeSpace = getFreeSpaceState();\r\n    let showDifficulty = getShowDifficultyState();\r\n    let showEmoji = getShowEmojiState();\r\n    \r\n    let div = document.getElementById(\"card\");\r\n    div.innerHTML = \"\";\r\n    let freeSpaceIndex = getFreeSpaceIndex(cardSize);\r\n    for (let i = 0; i < cardSize; i++) {\r\n        let row = document.createElement(\"div\");\r\n        row.classList.add(\"bingo-row\");\r\n        for (let j = 0; j < cardSize; j++) {\r\n            let cellIndex = i * cardSize + j;\r\n            let cell = document.createElement(\"div\");\r\n            cell.classList.add(\"bingo-cell\");\r\n            cell.onclick = () => onClickCell(cell, i, j);\r\n\r\n            if (hasFreeSpace && cellIndex === freeSpaceIndex) {\r\n                cell.innerText = \"Free Space\";\r\n            } else {\r\n                if (hasFreeSpace && cellIndex > freeSpaceIndex) {\r\n                    cellIndex--;\r\n                }\r\n                let object = currentBingoObjects[cellIndex];\r\n                let cellHTML = \"\";\r\n                if (showEmoji) {\r\n                    cellHTML += object.emoji + \" \";\r\n                }\r\n                cellHTML += object.text;\r\n                if (showDifficulty) {\r\n                    cellHTML += \"<br>Difficulty \" + object.difficulty;\r\n                }\r\n                cell.innerHTML = cellHTML;\r\n            }\r\n\r\n            row.appendChild(cell);\r\n        }\r\n        div.appendChild(row);\r\n    }\r\n\r\n    updateJsonOutput();\r\n}\r\n\r\nfunction updateJsonOutput() {\r\n    let cardSize = getCardSize();\r\n    let hasFreeSpace = getFreeSpaceState();\r\n    let showDifficulty = getShowDifficultyState();\r\n    let showEmoji = getShowEmojiState();\r\n\r\n    let freeSpaceIndex = getFreeSpaceIndex(cardSize);\r\n    let outputObjects = [];\r\n    for (let i = 0; i < cardSize * cardSize; i++) {\r\n        let cellIndex = i;\r\n        if (hasFreeSpace && cellIndex === freeSpaceIndex) {\r\n            outputObjects.push({\"name\": \"Free Space\"});\r\n        } else {\r\n            if (hasFreeSpace && cellIndex > freeSpaceIndex) {\r\n                cellIndex--;\r\n            }\r\n            let object = currentBingoObjects[cellIndex];\r\n            let cellHTML = \"\";\r\n            if (showEmoji) {\r\n                cellHTML += object.emoji + \" \";\r\n            }\r\n            cellHTML += object.text;\r\n            if (showDifficulty) {\r\n                cellHTML += \"\\nDifficulty \" + object.difficulty;\r\n            }\r\n            outputObjects.push({\"name\": cellHTML});\r\n        }\r\n    }\r\n\r\n    let output = document.getElementById(\"json-output\");\r\n    output.innerHTML = \"\";\r\n    output.innerText = JSON.stringify(outputObjects);\r\n}\r\n\r\nfunction getFreeSpaceIndex(cardSize) {\r\n    return Math.floor((cardSize - 1) / 2) * cardSize + Math.floor((cardSize - 1) / 2);\r\n};\r\n\r\nfunction getToggledDifficulties() {\r\n    let selectedOptions = document.getElementById(\"difficulty-toggle\").selectedOptions;\r\n    let difficulties = [];\r\n    for (let i = 0; i < selectedOptions.length; i++) {\r\n        difficulties.push(parseInt(selectedOptions[i].value));\r\n    }\r\n    return difficulties;\r\n}\r\n\r\nfunction getCardSize() {\r\n    let cardSize = parseInt(\r\n        document.getElementById(\"size\")\r\n            .selectedOptions[0]\r\n            .value\r\n            .charAt(0)\r\n    );\r\n    return cardSize;\r\n}\r\n\r\nfunction getFreeSpaceState() {\r\n    let freeSpaceChecked = document.getElementById(\"free-space\").checked;\r\n    return freeSpaceChecked;\r\n}\r\n\r\nfunction getShowDifficultyState() {\r\n    let showDifficultyChecked = document.getElementById(\"show-difficulty\").checked;\r\n    return showDifficultyChecked;\r\n}\r\n\r\nfunction getShowEmojiState() {\r\n    let showEmojiChecked = document.getElementById(\"show-emoji\").checked;\r\n    return showEmojiChecked;\r\n}\r\n\r\n// max is exclusive\r\nfunction getRandomInt(max) {\r\n    let maxFloored = Math.floor(max);\r\n    return Math.floor(Math.random() * maxFloored);\r\n}\r\n"],
  "mappings": "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",
  "names": ["possibleObjects"]
}
