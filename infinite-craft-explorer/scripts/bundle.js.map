{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourcesContent": ["let numObjects = Object.keys(objects).length;\r\n\r\nlet scalingFactor = 4.75966;\r\nlet maxScalingFactor = 10;\r\nlet canvas = document.getElementById(\"the-canvas\");\r\nlet ctx = canvas.getContext(\"2d\");\r\nlet canvasWidth;\r\nlet canvasHeight;\r\nlet worldWidth;\r\nlet worldHeight;\r\n\r\nlet thingXMins = [];\r\nlet thingYMins = [];\r\nlet thingWidth = 100;\r\nlet thingHeight = 20;\r\nfor (let i = 0; i <= numObjects; i++) {\r\n    thingXMins.push(i * thingWidth);\r\n    thingYMins.push(i * thingHeight);\r\n}\r\n\r\nlet worldTopLeftX = -thingWidth;\r\nlet worldTopLeftY = -thingHeight;\r\nlet viewChanged = true;\r\n\r\nonResize();\r\n\r\nwindow.addEventListener(\"resize\", onResize);\r\n\r\nlet mouseDown = false;\r\nlet previousMouseX = undefined;\r\nlet previousMouseY = undefined;\r\nlet rawScrollValue = 1315.8;\r\ndocument.addEventListener(\"wheel\", onWheel);\r\ndocument.addEventListener(\"mousedown\", onMouseDown);\r\ndocument.addEventListener(\"mousemove\", onMouseMove);\r\ndocument.addEventListener(\"mouseup\", onMouseUp);\r\n\r\nwindow.requestAnimationFrame(draw);\r\n\r\nfunction onWheel(e) {\r\n    let newRawScrollValue = rawScrollValue + e.deltaY;\r\n    if (newRawScrollValue < 0) {\r\n        newRawScrollValue = 0;\r\n    } else if (newRawScrollValue > 9500) {\r\n        newRawScrollValue = 9500;\r\n    }\r\n\r\n    if (newRawScrollValue === rawScrollValue) {\r\n        return;\r\n    }\r\n\r\n    rawScrollValue = newRawScrollValue;\r\n\r\n    // Use a formula so scrolling one tick in and then one tick out will\r\n    // return you to the same scaling factor\r\n    scalingFactor = maxScalingFactor * Math.pow(0.95, rawScrollValue * 0.011);\r\n\r\n    viewChanged = true;\r\n}\r\n\r\nfunction onMouseDown(e) {\r\n    console.log(\"mousedown\");\r\n    previousMouseX = e.clientX;\r\n    previousMouseY = e.clientY;\r\n    mouseDown = true;\r\n}\r\n\r\nfunction onMouseMove(e) {\r\n    if (mouseDown) {\r\n        let deltaX = previousMouseX - e.clientX;\r\n        let deltaY = previousMouseY - e.clientY;\r\n        worldTopLeftX += deltaX / scalingFactor;\r\n        worldTopLeftY += deltaY / scalingFactor;\r\n        previousMouseX = e.clientX;\r\n        previousMouseY = e.clientY;\r\n        viewChanged = true;\r\n    }\r\n}\r\n\r\nfunction onMouseUp(e) {\r\n    console.log(\"mouseup\");\r\n    mouseDown = false;\r\n}\r\n\r\nfunction onResize() {\r\n    canvasWidth = window.innerWidth;\r\n    canvasHeight = window.innerHeight;\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n    worldWidth = canvasWidth / scalingFactor;\r\n    worldHeight = canvasHeight / scalingFactor;\r\n\r\n    // Since changing the canvas dimensions resets the style settings, this\r\n    // IS actually necessary (though these are probably the default anyways)\r\n    ctx.strokeStyle = \"black\";\r\n    ctx.fillStyle = \"black\";\r\n\r\n    viewChanged = true;\r\n}\r\n\r\nfunction draw() {\r\n    if (viewChanged) {\r\n        updateView();\r\n        viewChanged = false;\r\n    }\r\n    window.requestAnimationFrame(draw);\r\n}\r\n\r\nfunction updateView() {\r\n    worldWidth = canvasWidth / scalingFactor;\r\n    worldHeight = canvasHeight / scalingFactor;\r\n    ctx.lineWidth = 0.5 * scalingFactor;\r\n\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.textAlign = \"center\";\r\n    fontSize = 12 * scalingFactor;\r\n    ctx.font = \"500 normal \" + fontSize + \"px Roboto, sans-serif\";\r\n\r\n    let worldRightX = worldTopLeftX + worldWidth;\r\n    let worldBottomY = worldTopLeftY + worldHeight;\r\n\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n\r\n    let thingXStartIndex = undefined;\r\n    let thingXEndIndex = undefined;\r\n    for (let i = 0; i < thingXMins.length; i++) {\r\n        if (thingXStartIndex === undefined && thingXMins[i] > worldTopLeftX) {\r\n            thingXStartIndex = Math.max(0, i - 1);\r\n            i = thingXStartIndex;\r\n        } else if (thingXEndIndex === undefined && thingXMins[i] > worldRightX) {\r\n            thingXEndIndex = i - 1;\r\n        }\r\n    }\r\n\r\n    if (thingXStartIndex !== undefined && thingXEndIndex === undefined) {\r\n        thingXEndIndex = thingXMins.length - 1;\r\n    }\r\n\r\n    let thingYStartIndex = undefined;\r\n    let thingYEndIndex = undefined;\r\n    for (let i = 0; i < thingYMins.length; i++) {\r\n        if (thingYStartIndex === undefined && thingYMins[i] > worldTopLeftY) {\r\n            thingYStartIndex = Math.max(0, i - 1);\r\n            i = thingYStartIndex;\r\n        } else if (thingYEndIndex === undefined && thingYMins[i] > worldBottomY) {\r\n            thingYEndIndex = i - 1;\r\n        }\r\n    }\r\n\r\n    if (thingYStartIndex !== undefined && thingYEndIndex === undefined) {\r\n        thingYEndIndex = thingYMins.length - 1;\r\n    }\r\n\r\n    if (thingXStartIndex !== undefined && thingYStartIndex !== undefined) {\r\n\r\n        // Draw lines between cells\r\n        for (let i = thingXStartIndex; i <= thingXEndIndex; i++) {\r\n            let x = (thingXMins[i] - worldTopLeftX) * scalingFactor;\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, canvasHeight - 1);\r\n            ctx.stroke();\r\n        }\r\n        for (let i = thingYStartIndex; i <= thingYEndIndex; i++) {\r\n            let y = (thingYMins[i] - worldTopLeftY) * scalingFactor;\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, y);\r\n            ctx.lineTo(canvasWidth - 1, y);\r\n            ctx.stroke();\r\n        }\r\n\r\n        // Don't try to fill in a cell after the last cell dividing line\r\n        if (thingXEndIndex === numObjects) {\r\n            thingXEndIndex = numObjects - 1;\r\n        }\r\n        if (thingYEndIndex === numObjects) {\r\n            thingYEndIndex = numObjects - 1;\r\n        }\r\n\r\n        // Fill in the main cells\r\n        for (let i = thingXStartIndex; i <= thingXEndIndex; i++) {\r\n            let x = (thingXMins[i] - worldTopLeftX + thingWidth / 2) * scalingFactor;\r\n            for (let j = thingYStartIndex; j <= thingYEndIndex; j++) {\r\n                let y = (thingYMins[j] - worldTopLeftY + thingHeight / 2) * scalingFactor;\r\n\r\n                let ii = Math.min(i, j) + 1;\r\n                let jj = Math.max(i, j) + 1;\r\n                text = getGridContents(ii, jj);\r\n                if (text !== undefined) {\r\n                    ctx.fillText(text, x, y);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Fill the background of the frozen row and column\r\n        ctx.fillStyle = \"rgb(235, 235, 235)\"\r\n        let thingCanvasWidth = thingWidth * scalingFactor - 2 * ctx.lineWidth;\r\n        let thingCanvasHeight = thingHeight * scalingFactor - 2 * ctx.lineWidth;\r\n        for (let i = thingXStartIndex; i <= thingXEndIndex; i++) {\r\n            let x = (thingXMins[i] - worldTopLeftX) * scalingFactor + ctx.lineWidth;\r\n            ctx.fillRect(x, 0, thingCanvasWidth, thingCanvasHeight);\r\n        }\r\n        for (let i = thingYStartIndex; i <= thingYEndIndex; i++) {\r\n            let y = (thingYMins[i] - worldTopLeftY) * scalingFactor + ctx.lineWidth;\r\n            ctx.fillRect(0, y, thingCanvasWidth, thingCanvasHeight);\r\n        }\r\n\r\n        ctx.fillStyle = \"black\";\r\n        \r\n        // Draw the frozen top row\r\n        ctx.textBaseline = \"middle\";\r\n        let y = (thingHeight / 2) * scalingFactor;\r\n        console.log(\"thingXIndices\", thingXStartIndex, thingXEndIndex);\r\n        for (let i = thingXStartIndex; i <= thingXEndIndex; i++) {\r\n            text = getGridContents(0, i + 1);\r\n            console.log(\"getGridContents\", i + 1, 0);\r\n            if (text !== undefined) {\r\n                let x = (thingXMins[i] - worldTopLeftX + thingWidth / 2) * scalingFactor;\r\n                ctx.fillText(text, x, y);\r\n            }\r\n        }\r\n        \r\n        // Draw the frozen left column\r\n        ctx.textAlign = \"right\";\r\n        ctx.textBaseline = \"middle\";\r\n        let x = (thingWidth - thingHeight / 2) * scalingFactor;\r\n        for (let i = thingYStartIndex; i <= thingYEndIndex; i++) {\r\n            text = getGridContents(i + 1, 0);\r\n            if (text !== undefined) {\r\n                let y = (thingYMins[i] - worldTopLeftY + thingHeight / 2) * scalingFactor;\r\n                ctx.fillText(text, x, y);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Requires that i < j\r\nfunction getGridContents(i, j) {\r\n    let key = ((numObjects + 1) * i + j).toString();\r\n    let text = grid[key];\r\n    if (text === undefined) {\r\n        return undefined;\r\n    }\r\n    let object = objects[text];\r\n    if (object === undefined) {\r\n        return undefined;\r\n    }\r\n    return object.emoji + \" \" + text;\r\n}\r\n"],
  "mappings": "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",
  "names": ["x", "y", "text"]
}
